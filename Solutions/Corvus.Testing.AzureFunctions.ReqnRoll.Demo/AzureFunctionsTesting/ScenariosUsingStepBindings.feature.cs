// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AzureFunctionsTesting
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Using step bindings")]
    public partial class UsingStepBindingsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AzureFunctionsTesting", "Using step bindings", "\tIn order to test my Azure functions\r\n\tAs a developer\r\n\tI want to be able to star" +
                "t an Azure function from a step in my Scenario", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ScenariosUsingStepBindings.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Get request including a name in the querystring is successful")]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunction.InProcess", "net6.0", null)]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunctions.Isolated", "net8.0", null)]
        public async System.Threading.Tasks.Task AGetRequestIncludingANameInTheQuerystringIsSuccessful(string function, string runtime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("function", function);
            argumentsOfScenario.Add("runtime", runtime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A Get request including a name in the querystring is successful", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync(string.Format("I start a functions instance for the local project \'{0}\' on port 7075 with runtim" +
                            "e \'{1}\'", function, runtime), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync("I send a GET request to \'http://localhost:7075/?name=Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync("I receive a 200 response code", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
 await testRunner.AndAsync("the response body contains the text \'Hello, Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Get request without providing a name in the querystring fails.")]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunction.InProcess", "net6.0", null)]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunctions.Isolated", "net8.0", null)]
        public async System.Threading.Tasks.Task AGetRequestWithoutProvidingANameInTheQuerystringFails_(string function, string runtime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("function", function);
            argumentsOfScenario.Add("runtime", runtime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A Get request without providing a name in the querystring fails.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
 await testRunner.GivenAsync(string.Format("I start a functions instance for the local project \'{0}\' on port 7075 with runtim" +
                            "e \'{1}\'", function, runtime), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
 await testRunner.WhenAsync("I send a GET request to \'http://localhost:7075/\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.ThenAsync("I receive a 400 response code", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Post request including a name in the querystring is successful")]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunction.InProcess", "net6.0", null)]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunctions.Isolated", "net8.0", null)]
        public async System.Threading.Tasks.Task APostRequestIncludingANameInTheQuerystringIsSuccessful(string function, string runtime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("function", function);
            argumentsOfScenario.Add("runtime", runtime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A Post request including a name in the querystring is successful", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
 await testRunner.GivenAsync(string.Format("I start a functions instance for the local project \'{0}\' on port 7075 with runtim" +
                            "e \'{1}\'", function, runtime), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
 await testRunner.WhenAsync("I send a POST request to \'http://localhost:7075/?name=Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
 await testRunner.ThenAsync("I receive a 200 response code", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
 await testRunner.AndAsync("the response body contains the text \'Hello, Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Post request including a name in the request body is successful")]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunction.InProcess", "net6.0", null)]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunctions.Isolated", "net8.0", null)]
        public async System.Threading.Tasks.Task APostRequestIncludingANameInTheRequestBodyIsSuccessful(string function, string runtime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("function", function);
            argumentsOfScenario.Add("runtime", runtime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A Post request including a name in the request body is successful", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 39
 await testRunner.GivenAsync(string.Format("I start a functions instance for the local project \'{0}\' on port 7075 with runtim" +
                            "e \'{1}\'", function, runtime), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table9.AddRow(new string[] {
                            "name",
                            "Jon"});
#line 40
 await testRunner.WhenAsync("I send a POST request to \'http://localhost:7075/\' with data in the request body", ((string)(null)), table9, "When ");
#line hidden
#line 43
 await testRunner.ThenAsync("I receive a 200 response code", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 44
 await testRunner.AndAsync("the response body contains the text \'Hello, Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Post request including names in the querystring and request body uses the name " +
            "in the querystring")]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunction.InProcess", "net6.0", null)]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunctions.Isolated", "net8.0", null)]
        public async System.Threading.Tasks.Task APostRequestIncludingNamesInTheQuerystringAndRequestBodyUsesTheNameInTheQuerystring(string function, string runtime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("function", function);
            argumentsOfScenario.Add("runtime", runtime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A Post request including names in the querystring and request body uses the name " +
                    "in the querystring", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
 await testRunner.GivenAsync(string.Format("I start a functions instance for the local project \'{0}\' on port 7075 with runtim" +
                            "e \'{1}\'", function, runtime), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table10.AddRow(new string[] {
                            "name",
                            "Jonathan"});
#line 53
 await testRunner.WhenAsync("I send a POST request to \'http://localhost:7075/?name=Jon\' with data in the reque" +
                        "st body", ((string)(null)), table10, "When ");
#line hidden
#line 56
 await testRunner.ThenAsync("I receive a 200 response code", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
 await testRunner.AndAsync("the response body contains the text \'Hello, Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Post request without a querystring or request body fails")]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunction.InProcess", "net6.0", null)]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunctions.Isolated", "net8.0", null)]
        public async System.Threading.Tasks.Task APostRequestWithoutAQuerystringOrRequestBodyFails(string function, string runtime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("function", function);
            argumentsOfScenario.Add("runtime", runtime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A Post request without a querystring or request body fails", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 65
 await testRunner.GivenAsync(string.Format("I start a functions instance for the local project \'{0}\' on port 7075 with runtim" +
                            "e \'{1}\'", function, runtime), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
 await testRunner.WhenAsync("I send a POST request to \'http://localhost:7075/\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
 await testRunner.ThenAsync("I receive a 400 response code", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Supplying an alternative greeting via configuration")]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunction.InProcess", "net6.0", null)]
        [NUnit.Framework.TestCaseAttribute("Corvus.Testing.AzureFunctions.DemoFunctions.Isolated", "net8.0", null)]
        public async System.Threading.Tasks.Task SupplyingAnAlternativeGreetingViaConfiguration(string function, string runtime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("function", function);
            argumentsOfScenario.Add("runtime", runtime);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Supplying an alternative greeting via configuration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table11.AddRow(new string[] {
                            "ResponseMessage",
                            "Welcome, {name}"});
#line 75
 await testRunner.GivenAsync("I have set additional configuration for functions instances", ((string)(null)), table11, "Given ");
#line hidden
#line 78
 await testRunner.GivenAsync(string.Format("I start a functions instance for the local project \'{0}\' on port 7075 with runtim" +
                            "e \'{1}\'", function, runtime), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 79
 await testRunner.WhenAsync("I send a GET request to \'http://localhost:7075/?name=Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
 await testRunner.ThenAsync("I receive a 200 response code", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 81
 await testRunner.AndAsync("the response body contains the text \'Welcome, Jon\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
